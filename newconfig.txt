const path = require("path");

const GlobEntriesPlugin = require("webpack-watched-glob-entries-plugin");
// const BundleAnalyzerPlugin = require("webpack-bundle-analyzer")
//   .BundleAnalyzerPlugin;
// const ProvidePlugin = require("webpack-provide-plugin");


module.exports = {
  webpack: (config, { dev, vendor }) => {
    const envName = dev ? "development" : "production";
    return {
      mode: envName,
      devtool = "eval",
      //jquery
    plugins: [
      new webpack.ProvidePlugin({
        $: "jquery",
        jQuery: "jquery",
        "window.jQuery": "jquery'",
        "window.$": "jquery",
      })
      ],
      module: { rules: [{
      enforce: "pre",
      test: /\.js$/,
      use: ["source-map-loader"],
    }, {
      test: /\.ts$/,
      exclude: path.resolve("src", "./scripts/lib"),
      use: [
        {
          loader: "ts-loader"
        }
      ]
    }] },
    // resolve.extensions.push(".ts"),
    entry: GlobEntriesPlugin.getEntries([
      path.resolve("src", "*.{js,mjs,jsx,ts}"),
      path.resolve("src", "?(scripts)/*.{js,mjs,jsx,ts}")
    ]),
     optimization.splitChunks : {
      name: "scripts/vendor",
      chunks: "initial"
    },
    output.chunkFilename : "[name].js",

    // Disable minimize for vendor review
    optimization.minimize:false
  },
  copyIgnore: ["**/*.ts"]
};
